Tasarım Kalıplarının Amacı :
  Nesne-merkezli prensipleri kullanarak
   1-Doğru sorumlulukları bulmak
   2-Değişimi göz önüne alarak bu sorumlulukları nesnelere dağıtmak
   3-Nesneleri , aralarında az bağımlılık oluştıracak şekilde kurgulamaktır.
----------------------------------------------------------------------------------------------
Tekrarlanan Problemler :
  1-Nesneleri nasıl yaratırız ?
  2-Karmaşık nesneleri nasıl yaratırız ?
  3-Nesne ailelerini nasıl yaratırız ?
  4-Bir sınıftan sadece bir ya da belirli sayıda nesne nasıl yaratırız ?
  5-Nesnelere erişimi nasıl kontrol ederiz ?
  6-Nesneler arasındaki bütün-parça ilişkisini nasıl tasarlarız ?

  -Karmaşık nesneleri projelerde oluştururken soyutlayıp , zapt edemezsek kocaman bir çöplük oluşuyor.
  -Herkesin gelişi güzel nesne oluşturmasını da engellemek gerekir.
----------------------------------------------------------------------------------------------
Bir Tasarım Kalıbının Yapısı :
  Bir tasarım kalıbının temelde 4 bileşeni vardır.
  1-İsmi ki o kalıbı, problemi ve çözümüyle birlikte ayırt etmemizi sağlar.
  2-Problem ki hangi bağlamda nasıl ortaya çıktığını ifade eder.
  3-Çözüm ki parçaları ve aralarındaki ilişkileri ifade eder.
  4-Sonuçlar ki kazanılan ve kaybedilenleri ifade eder.
----------------------------------------------------------------------------------------------
  No Silver Bullet - Yazılımın Asli 4 Özelliği Vardır der Kitapta F.Brooks
    1-Karmaşıktır.
    2-Çok Değişir
    3-Yazılım Görülemez
    4-Yazılım Uyumludur

  Aslında , görülemez ve uyumlu olmasını , karmaşıklığının ve sık değişmesinin sebeplerinden olduğnu düşünebiliriz.
  Bu durumda yazılımın en temel iki özelliği , Karmaşıklık ve Değişmedir diyebiliriz.
----------------------------------------------------------------------------------------------
  Robert E.Wood 1886 yılında yayınladığı bir Task Complexity : Definition of The Construct isimli makalesinde , bir işin teorik yapısında
    3 parça olduğunu ifade eder :
      1-İşin Ürettiği Çıktılar (products)
      2-İş için gerekli işlemler ya da davranışlar (required acts)
      3-İş için gerekli bilgi girdisi (information cues)
----------------------------------------------------------------------------------------------
    Bileşen Karmaşıklığı ( Component Complexity)
  f(ayrık işlemleri karmaşıklığı , bilgi girdlerinin karmaşıklığı)

    İlişkisel Karmaşıklık ( Coordinative Complexity )
  f(işlemler arasındnaki ilişkilerin karmaşıklığı)

  Yazılım karmaşıklığı = bizim için tek tek bileşenlerinin karmaşıklığı + bu bileşenlerin runtime anında nasıl bir ilişki kuracaklarının karmaşıklığı
----------------------------------------------------------------------------------------------
  Birliktelik ( Birleşik Karmaşıklığı) Kohezyon
    Bileşenin alt parçalarının ne kadar "birlikte" (togetherness) olduğunun bir ölçüsüdür ve Cohesion olarak adlandırılır.
    Birliktelik tek bir amaca odaklılıktır. (Single Responsibility)
    Dolayısıyla , farklı işler farklı yerlerde yapılacak şekilde ayrılmalıdır.
      Seperation of Concerns
----------------------------------------------------------------------------------------------
   Birliteliği yüksek bileşenlerin,
    -Karmaşıklığı düşüktür (Çünkü aynı işi yapıyorlardır)
    -bakım maliyetleri düşüktür.
    -tekrar kullanıma daha yatkındırlar.
----------------------------------------------------------------------------------------------
    Birliktelik Tipleri
      1-Coincidental ( Gelişigüzel )
      2-Logical ( Naif Mantıksal )
      3-Temporal ( Zamansal )
      4-Procedural ( Prosedürel )
      5-Communicational/Informational ( İletişimsel )
      6-Sequential ( Ardışıl )
      7-Functional ( Fonksiyonel )
----------------------------------------------------------------------------------------------
      Nesne Kategorizasyonu
   Yazılım sistemlerinde farklı rollerde iş gören nesneler bulunur.
   Nesneler , bazı rollere göre sınıflandırılanilir.
   Dolayısıyla nesne rolleri , daha yüksek birlikteliğe sahip nesneler elde etmeye yardımcı olabilir.
----------------------------------------------------------------------------------------------
   Ivar Jacobsaon'ın sınıflandırması , 3 rolden oluşur
    1-Boundary : Sistemin aktörleriyle olann iletişimini yöneten nesnelerdir , interface nesneleri de denir.
    2-Control  : İş süreçlerini yöneten ve ilgili kuralları bilen nesnelerdir , çoğunlukla service olarak bilinirler.
    3-Entity   : İş alano (business domain) nesnlerdir.
    B-E-C modelidir
----------------------------------------------------------------------------------------------
    Model-View-Controller (MVC) Kalıbını , Jacobson'ın sınıflandırmasıyla ifade edersek :
      Boıundary -> View
      Entity -> Model
      Control -> Controller
----------------------------------------------------------------------------------------------
   Bağımlılık - Coupling
    Koordinasyon karmaşıklığı , bir işin kendi başına ifade edilebilirliğinin ya da diğerleriyke be kadar ilgili " relatedness " olduğunun ölçüsüdür.
    İlgililik , bağımlılıktır (coupling) ve bağımlılığı düşük olan bileşenlerin karmaşıklığı da düşüktür.
    Daha az malzeme ile yapılabilecek bir işi daha çoğu ile yapmayın ! Occam's Razor
    Low-copling ya da loose/weak-coupling
----------------------------------------------------------------------------------------------
    Bağımlılık Tipleri
  1-İçerik (Content) : Yapıların birbirlerinin iç yapılarına , gerçekleştirmelerine (implemantation) bağımlı olduğu durumdur.
  2-Ortak (Common)   : Global veri ve değişkenleri kullanan yapılar arasındaki bağımlılıktır.
  3-Dışsal(External) : Yapıları arasında , ortak kullandıkları dış bir bileşen yada sistemin format , arayüz,veri yapısı vb. dayatmasından kaynaklanan bağımlılıktır.
  4-Mesaj (Message)  : Arayüzü (inteface) bilgisi dışında başka hiç bir bilgi gerektirmeyen bağımlılık şeklidir.
    --Olması gereken en sağlıklı bağımlılıktır.
    --Metotlar,sınıflar,modüller,katmanlar ve sistemler arasında uygulanabilir.
    5-Miras Bağımlılığı (Inheritance Coupling) : Üst yapı ile ondan türetilen yapı arasındaki bağımlılıktır.
    6-Soyut Bağımlılık (Abstract Coupling) : Soyut olan üst yapılara olan bağımlılıktır.
      --Soyut bağımlılıkta , gerçekleştirme mirası ile arayüz mirası kullanılır.
                            (impelementation inheritance) & (interface inheritance)
----------------------------------------------------------------------------------------------
Nesneler arasında bağımlılık arttıkça :
    1-Aralarında daha fazla koordinasyon ihtiyacı doğar ,
    2-Aralarında daha fazla veri akışı olur ,
    3-Birbirlerindeki değişimlerden daha sık ve çok etkilenirler ve muhtemelene birlikte değişirler.
    4-Yüksek bağımlılık , çığ gibi büyüyen değişim problemi ortaya çıkarır.
----------------------------------------------------------------------------------------------
    Birliktelik ve Bağımlılık
 -İşleri yapan bileşenleri yükske birliktelikli (highly-cohesive) ve düşük bağımlılılı (lowly-coupled) olması için ,
işlerin uygun bir şekikde ve seviyede , alt parçalara , atomik işlere bölünmese gerekir. Öyle ki , ortaya çıkan atomik işlerin ,
  1-daha küçük alt parçalara bölünmesine gerek olmasın ,
  2-tek bir amacı olsun , her biri tek bir işi yapsın ama tam yapsın ,
  3-birbirleriyle ilişkileri en az seviyede olsun
----------------------------------------------------------------------------------------------
  .Yüksek birliktelikli ve düşük bağımlılıklı işler , rahat , anlaşılır , hızlı geliştirilir , kolay test edilir ve aktarılır.
  .Dolayısıyla , her türlü yazılım birimi , bileşen , modül , paket , sınıf/arayüz , metot , blok ve hatta satır , yüksek birliktelikli ve düşük bağımlılıklı olmalıdır.
----------------------------------------------------------------------------------------------
    Veri ve Sorumluluk
 1-Veri tek başına ilişki kurmak konusunda işleri zorlaştırabilir. Bu sebeple veriyi anlamlı kılacak davranışlar gereklidir. Veriler davranış varlığındayken anlamlı olur
    Bu sebeple bağlam olmadan anlam olmaz, bağlamı da davranış/sorumluluk sağlar.
----------------------------------------------------------------------------------------------
      Anemic Domain Model - 1
 -Düşük kohezyon , yüksek bağımlılıklı nesnelere belki de en güzel örnek Martin.Fowler tarafından Kansız Alan Modeli (Aemic Domain Model) olarak adlandırılan ve
    entity nesnelerinde görülen tipik bir durumdur.
 -Anemic Domain Model , iş alanının temsil eden nesnelerin , iş alanıyla ilgili sadece veriyi taşıyıp , herhangi bir davranışa sahip olmadığı durumudur.
    Dolayısıyla nesneler arasındaki bağımlılık , arayüzlerindeki davranışlar yerine , doğrudan erişerek ya da set/get metotlarıyla veri üzerindendir.
----------------------------------------------------------------------------------------------
    Tasarım Kalıpları ( Design Patterns)
  1-SOLID PRENSIPLERI
    -SINGLE RESPONSIBILITY PRINCIPLE
    -OPEN-CLOSED PRINCIPLE
    -LISKOV SUBSTITUTION PRINCIPLE
    -INTERFACE SEGREGATION PRINCIPLE
    -DEPENDENCY INVERSION PRINCIPLE
      -ek olarak - GRANULARITY PRINCIPLE
----------------------------------------------------------------------------------------------
    SRP : SINGLE RESPONSIBILITY PRINCIPLE : Bir sınıfın değişmesi için asla birden fazla sebep olmamalıdır.
    OCP : OPEN CLOSED PRINCIPLE : Yazılım yapıları genişletilmeye açık ama değişime kapalı olmalı.
    LSP : LISKOV SUBSTITUTION PRINCIPLE : Taban sınıflara işaretçi ya da referans kullanan fonksiyonlar türetilen sınıfların nesnelerinide bilmeden kullanabilmelidirler.
    ISP : INTERFACE SEGREGATION PRINCIPLE : İstemciler kullanmadıkları arayüzlere bağımlı olmaya zorlanmamalıdır.
    DIP : DEPENDENCY INVERSION PRINCIPLE : Yüksek seviyeli modüller aşağı seviyeli modüllere bağımlı olmamalıdır. İkisi de soyutlamalara bağımlı olmalıdır.
        Soyutlamalar , detaylara bağımlı olmamalı , detaylar soyutlamalara bağımlı olmalıdır.
----------------------------------------------------------------------------------------------
 Single Responsibility Principle
Paket : Birlikte release edilen yapılar aynı pakette olmalıdır.
Sınıf : Sınıf sadecebir şeyi soyutlamalı sadece o şeyle ilgili veri ve davranışa sahip olmalıdır.
Metot : Sınıfın soyutladığı şey ile ilgili , tekrar kullanılabilecek bölünmez tek bir iş yapmalıdır.






